"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParser = exports.getJSRegexppAst = exports.extractCaptures = exports.getRegExpNodeFromExpression = exports.getFirstConsumedCharPlusAfter = void 0;
const regexpp_1 = require("@eslint-community/regexpp");
const ast_utils_1 = require("../ast-utils");
const refa_1 = require("refa");
var common_1 = require("./common");
Object.defineProperty(exports, "getFirstConsumedCharPlusAfter", { enumerable: true, get: function () { return common_1.getFirstConsumedCharPlusAfter; } });
__exportStar(require("./is-covered"), exports);
__exportStar(require("./is-equals"), exports);
const parser = new regexpp_1.RegExpParser();
function getRegExpNodeFromExpression(node, context) {
    if (node.type === "Literal") {
        if ("regex" in node && node.regex) {
            try {
                return parser.parsePattern(node.regex.pattern, 0, node.regex.pattern.length, {
                    unicode: node.regex.flags.includes("u"),
                    unicodeSets: node.regex.flags.includes("v"),
                });
            }
            catch (_a) {
                return null;
            }
        }
        return null;
    }
    const evaluated = (0, ast_utils_1.getStaticValue)(context, node);
    if (!evaluated || !(evaluated.value instanceof RegExp)) {
        return null;
    }
    try {
        return (0, regexpp_1.parseRegExpLiteral)(evaluated.value);
    }
    catch (_b) {
        return null;
    }
}
exports.getRegExpNodeFromExpression = getRegExpNodeFromExpression;
function extractCaptures(patternNode) {
    let count = 0;
    const names = new Set();
    (0, regexpp_1.visitRegExpAST)(patternNode, {
        onCapturingGroupEnter(cgNode) {
            count++;
            if (cgNode.name != null) {
                names.add(cgNode.name);
            }
        },
    });
    return { count, names };
}
exports.extractCaptures = extractCaptures;
function getJSRegexppAst(context, ignoreSticky = false) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { flags, flagsString, patternAst } = context;
    return {
        pattern: patternAst,
        flags: {
            type: "Flags",
            raw: flagsString !== null && flagsString !== void 0 ? flagsString : "",
            parent: null,
            start: NaN,
            end: NaN,
            dotAll: (_a = flags.dotAll) !== null && _a !== void 0 ? _a : false,
            global: (_b = flags.global) !== null && _b !== void 0 ? _b : false,
            hasIndices: (_c = flags.hasIndices) !== null && _c !== void 0 ? _c : false,
            ignoreCase: (_d = flags.ignoreCase) !== null && _d !== void 0 ? _d : false,
            multiline: (_e = flags.multiline) !== null && _e !== void 0 ? _e : false,
            sticky: !ignoreSticky && ((_f = flags.sticky) !== null && _f !== void 0 ? _f : false),
            unicode: (_g = flags.unicode) !== null && _g !== void 0 ? _g : false,
            unicodeSets: (_h = flags.unicodeSets) !== null && _h !== void 0 ? _h : false,
        },
    };
}
exports.getJSRegexppAst = getJSRegexppAst;
const parserCache = new WeakMap();
function getParser(context) {
    let cached = parserCache.get(context);
    if (cached === undefined) {
        cached = refa_1.JS.Parser.fromAst(getJSRegexppAst(context));
        parserCache.set(context, cached);
    }
    return cached;
}
exports.getParser = getParser;
